%%% -*- mode: erlang -*-
%%%

+NAME("eep8_types_predefined").

+VSN("ubf1.0").


%%
%% Excerpt from http://www.erlang.org/eeps/eep-0008.txt
%%
%% The set of predefined types and the syntax for types is given
%% below::
%%
%%     Type :: any()            %% The top type, the set of all Erlang terms.
%%           | none()           %% The bottom type, contains no terms.
%%           | pid()
%%           | port()
%%           | reference()
%%           | []               %% nil
%%           | Atom
%%           | Binary
%%           | float()
%%           | Fun
%%           | Integer
%%           | List
%%           | Tuple
%%           | Union
%%           | UserDefined      %% described in Section 2
%%
%%     Union :: Type1 | Type2
%%
%%     Atom :: atom()
%%           | Erlang_Atom      %% 'foo', 'bar', ...
%%
%%     Binary :: binary()                        %% <<_:_ * 8>>
%%             | <<>>
%%             | <<_:Erlang_Integer>>            %% Base size
%%             | <<_:_*Erlang_Integer>>          %% Unit size
%%             | <<_:Erlang_Integer, _:_*Erlang_Integer>>
%%
%%     Fun :: fun()                              %% any function
%%          | fun((...) -> Type)                 %% any arity, returning Type
%%          | fun(() -> Type)
%%          | fun((TList) -> Type)
%%
%%     Integer :: integer()
%%              | Erlang_Integer                 %% ..., -1, 0, 1, ... 42 ...
%%              | Erlang_Integer..Erlang_Integer %% specifies an integer range
%%
%%     List :: list(Type)                        %% Proper list ([]-terminated)
%%           | improper_list(Type1, Type2)       %% Type1=contents, Type2=termination
%%           | maybe_improper_list(Type1, Type2) %% Type1 and Type2 as above
%%
%%     Tuple :: tuple()                          %% stands for a tuple of any size
%%            | {}
%%            | {TList}
%%
%%     TList :: Type
%%            | Type, TList
%%


%%
%% Supported eep8 predefined types:
%%
%%   via ubf predefined types
%%     - <<>>
%%     - Atom
%%     - Integer
%%     - Tuple
%%     - Union
%%     - UserDefined
%%     - binary()
%%     - float()
%%     - list(Type)
%%
%%   via ubf contract
%%     - any()
%%     - nil()
%%     - none()
%%
%%   not implemented
%%     - <<_:Erlang_Integer>>
%%     - <<_:_*Erlang_Integer>>
%%     - <<_:Erlang_Integer, _:_*Erlang_Integer>>
%%     - improper_list(Type1, Type2)
%%     - maybe_improper_list(Type1, Type2)
%%
%%   not supported
%%     - Fun
%%     - pid()
%%     - port()
%%     - reference()
%%


%%%%%%
+TYPES

any() :: term();
nil() :: [];
none() :: void().
